Problem Description:
You are given a 2D integer matrix mat of size n x m and a list of queries.
Each query is represented as a 4-element array [r1, c1, r2, c2], which denotes the top-left and bottom-right coordinates of a submatrix.
Your task is to return the sum of elements inside the submatrix for each query.
Note: The matrix is 0-indexed, and queries are 0-indexed as well.

class Solution {
  public:
    vector<int> prefixSum2D(vector<vector<int>> &mat, vector<vector<int>> &queries) {
        // code here
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));
        dp[0][0] = mat[0][0];
        
        for(int i=1; i<n; i++){
            dp[i][0] = mat[i][0] + dp[i-1][0];
        }
        
        for(int j=1; j<m; j++){
            dp[0][j] = mat[0][j] + dp[0][j-1];
        }
        
        for(int i=1; i<n; i++){
            for(int j=1; j<m; j++){
                dp[i][j] = mat[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1];
            }
        }
        
        vector<int> result;
        for(auto& q : queries){
            int r1 = q[0], c1 = q[1];
            int r2 = q[2], c2 = q[3];
            
            int total = dp[r2][c2];
            int top = (r1>0) ? dp[r1-1][c2] : 0;
            int left = (c1>0) ? dp[r2][c1-1] : 0;
            int diag = (r1>0 && c1>0) ? dp[r1-1][c1-1] : 0;
            
            int sum = total - top - left + diag;
            result.push_back(sum);
        }
        
        return result;
    }
};

Example 1
Input:
mat = [[1, 2],
       [3, 4]]
queries = [[0, 0, 1, 1], [0, 1, 1, 1]]
Output: [10, 6]
Explanation:
Query [0,0,1,1] → sum of all elements = 1+2+3+4 = 10
Query [0,1,1,1] → sum of elements in column 1 = 2+4 = 6
