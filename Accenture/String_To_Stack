#include <iostream>
#include <sstream>
#include <stack>
#include <string>
#include <cctype>
using namespace std;

int solution(string S) {
    const long long MAX_VAL = (1LL << 20) - 1;
    stack<long long> st;  // Using actual stack!
    istringstream iss(S);
    string token;
    
    auto isNumber = [](const string& s) -> bool {
        if (s.empty()) return false;
        for (char c : s) if (!isdigit(c)) return false;
        return true;
    };
    
    while (iss >> token) {
        if (token == "POP") {
            if (st.empty()) return -1;
            st.pop();
            
        } else if (token == "DUP") {
            if (st.empty()) return -1;
            st.push(st.top());  // Duplicate top
            
        } else if (token == "+") {
            if (st.size() < 2) return -1;
            long long top = st.top(); st.pop();
            long long second = st.top(); st.pop();
            long long result = top + second;
            if (result > MAX_VAL) return -1;
            st.push(result);
            
        } else if (token == "-") {
            if (st.size() < 2) return -1;
            long long top = st.top(); st.pop();
            long long second = st.top(); st.pop();
            long long result = top - second;
            if (result < 0) return -1;
            st.push(result);
            
        } else if (isNumber(token)) {
            long long num = stoll(token);
            if (num < 0 || num > MAX_VAL) return -1;
            st.push(num);
            
        } else {
            return -1;
        }
    }
    
    if (st.empty()) return -1;
    return st.top();
}

int main() {
    cout << solution("13 DUP 4 POP 5 DUP + DUP + -") << endl;  // 7
    cout << solution("5 6 + -") << endl;  // -1
    return 0;
}
